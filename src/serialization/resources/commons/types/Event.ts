/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../..";
import { CovieApi } from "@fern-api/covie";
import * as core from "../../../../core";

export const Event: core.serialization.ObjectSchema<serializers.Event.Raw, CovieApi.Event> = core.serialization.object({
    id: core.serialization.string().optional(),
    eventType: core.serialization.property(
        "event_type",
        core.serialization.lazy(async () => (await import("../../..")).EventType).optional()
    ),
    occurredAt: core.serialization.property("occurred_at", core.serialization.string().optional()),
    links: core.serialization.property(
        "_links",
        core.serialization.lazyObject(async () => (await import("../../..")).EventPayloadLinkContainer).optional()
    ),
});

export declare namespace Event {
    interface Raw {
        id?: string | null;
        event_type?: serializers.EventType.Raw | null;
        occurred_at?: string | null;
        _links?: serializers.EventPayloadLinkContainer.Raw | null;
    }
}
