/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../..";
import { CovieApi } from "@fern-api/covie";
import * as core from "../../../../core";

export const Location: core.serialization.ObjectSchema<serializers.Location.Raw, CovieApi.Location> =
    core.serialization.object({
        address: core.serialization.lazyObject(async () => (await import("../../..")).Address).optional(),
        coverages: core.serialization.lazyObject(async () => (await import("../../..")).CoverageInfo).optional(),
        otherDeductibles: core.serialization.property("other_deductibles", core.serialization.unknown().optional()),
        discounts: core.serialization
            .list(core.serialization.lazyObject(async () => (await import("../../..")).Discount))
            .optional(),
        interests: core.serialization
            .list(core.serialization.lazyObject(async () => (await import("../../..")).Interest))
            .optional(),
    });

export declare namespace Location {
    interface Raw {
        address?: serializers.Address.Raw | null;
        coverages?: serializers.CoverageInfo.Raw | null;
        other_deductibles?: unknown | null;
        discounts?: serializers.Discount.Raw[] | null;
        interests?: serializers.Interest.Raw[] | null;
    }
}
