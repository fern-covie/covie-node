/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../..";
import { CovieApi } from "@fern-api/covie";
import * as core from "../../../../core";

export const Policy: core.serialization.ObjectSchema<serializers.Policy.Raw, CovieApi.Policy> =
    core.serialization.object({
        id: core.serialization.string().optional(),
        object: core.serialization.string().optional(),
        fingerprint: core.serialization.string().optional(),
        carrier: core.serialization.lazyObject(async () => (await import("../../..")).Carrier).optional(),
        number: core.serialization.string().optional(),
        maskedNumber: core.serialization.property("masked_number", core.serialization.string().optional()),
        line: core.serialization.lazy(async () => (await import("../../..")).LineOfBusiness).optional(),
        policyholders: core.serialization
            .list(core.serialization.lazyObject(async () => (await import("../../..")).Policyholder))
            .optional(),
        vehicles: core.serialization
            .list(core.serialization.lazyObject(async () => (await import("../../..")).Vehicle))
            .optional(),
        locations: core.serialization
            .list(core.serialization.lazyObject(async () => (await import("../../..")).Location))
            .optional(),
        status: core.serialization.lazy(async () => (await import("../../..")).PolicyStatus).optional(),
        termLength: core.serialization.property(
            "term_length",
            core.serialization.lazyObject(async () => (await import("../../..")).PeriodValue).optional()
        ),
        inceptionDate: core.serialization.property("inception_date", core.serialization.string().optional()),
        expirationDate: core.serialization.property("expiration_date", core.serialization.string().optional()),
        cancellationDate: core.serialization.property("cancellation_date", core.serialization.string().optional()),
        cancellationReason: core.serialization.property(
            "cancellation_reason",
            core.serialization.lazy(async () => (await import("../../..")).CancellationReason).optional()
        ),
        linkedAt: core.serialization.property("linked_at", core.serialization.string().optional()),
        lastSyncedAt: core.serialization.property("last_synced_at", core.serialization.string().optional()),
        links: core.serialization.property(
            "_links",
            core.serialization.lazyObject(async () => (await import("../../..")).LinkedResources).optional()
        ),
        embedded: core.serialization.property(
            "_embedded",
            core.serialization.lazyObject(async () => (await import("../../..")).EmbeddedObjects).optional()
        ),
        linkId: core.serialization.property("link_id", core.serialization.string().optional()),
    });

export declare namespace Policy {
    interface Raw {
        id?: string | null;
        object?: string | null;
        fingerprint?: string | null;
        carrier?: serializers.Carrier.Raw | null;
        number?: string | null;
        masked_number?: string | null;
        line?: serializers.LineOfBusiness.Raw | null;
        policyholders?: serializers.Policyholder.Raw[] | null;
        vehicles?: serializers.Vehicle.Raw[] | null;
        locations?: serializers.Location.Raw[] | null;
        status?: serializers.PolicyStatus.Raw | null;
        term_length?: serializers.PeriodValue.Raw | null;
        inception_date?: string | null;
        expiration_date?: string | null;
        cancellation_date?: string | null;
        cancellation_reason?: serializers.CancellationReason.Raw | null;
        linked_at?: string | null;
        last_synced_at?: string | null;
        _links?: serializers.LinkedResources.Raw | null;
        _embedded?: serializers.EmbeddedObjects.Raw | null;
        link_id?: string | null;
    }
}
