/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../environments";
import * as core from "../../../../core";
import { CovieApi } from "@fern-api/covie";
import urlJoin from "url-join";
import * as serializers from "../../../../serialization";
import * as errors from "../../../../errors";

export declare namespace Client {
    interface Options {
        environment?: environments.CovieApiEnvironment | string;
        credentials?: core.Supplier<core.BasicAuth>;
    }
}

export class Client {
    constructor(private readonly options: Client.Options) {}

    /**
     * Retrieve a Policy object that was previously connected via a Link
     */
    public async getPoliciesPolicyId(policyId: string): Promise<CovieApi.Policy> {
        const _response = await core.fetcher({
            url: urlJoin(
                this.options.environment ?? environments.CovieApiEnvironment.Production,
                `/policies/${policyId}`
            ),
            method: "GET",
            headers: {
                Authorization: core.BasicAuth.toAuthorizationHeader(await core.Supplier.get(this.options.credentials)),
            },
        });
        if (_response.ok) {
            return await serializers.policy.getPoliciesPolicyId.Response.parse(
                _response.body as serializers.policy.getPoliciesPolicyId.Response.Raw
            );
        }

        if (_response.error.reason === "status-code") {
            throw new errors.CovieApiError({
                statusCode: _response.error.statusCode,
                responseBody: _response.error.rawBody,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.CovieApiError({
                    statusCode: _response.error.statusCode,
                    responseBody: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.CovieApiTimeoutError();
            case "unknown":
                throw new errors.CovieApiError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * List all events that have been triggered for the selected policy
     */
    public async listPolicyEvents(
        policyId: string,
        request?: CovieApi.ListPolicyEventsRequest
    ): Promise<CovieApi.Events> {
        const _queryParams = new URLSearchParams();
        if (request?.limit != null) {
            _queryParams.append("limit", request?.limit.toString());
        }

        if (request?.offset != null) {
            _queryParams.append("offset", request?.offset.toString());
        }

        if (request?.eventType != null) {
            _queryParams.append("event_type", request?.eventType);
        }

        const _response = await core.fetcher({
            url: urlJoin(
                this.options.environment ?? environments.CovieApiEnvironment.Production,
                `/policies/${policyId}/events`
            ),
            method: "GET",
            headers: {
                Authorization: core.BasicAuth.toAuthorizationHeader(await core.Supplier.get(this.options.credentials)),
            },
            queryParameters: _queryParams,
        });
        if (_response.ok) {
            return await serializers.policy.listPolicyEvents.Response.parse(
                _response.body as serializers.policy.listPolicyEvents.Response.Raw
            );
        }

        if (_response.error.reason === "status-code") {
            throw new errors.CovieApiError({
                statusCode: _response.error.statusCode,
                responseBody: _response.error.rawBody,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.CovieApiError({
                    statusCode: _response.error.statusCode,
                    responseBody: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.CovieApiTimeoutError();
            case "unknown":
                throw new errors.CovieApiError({
                    message: _response.error.errorMessage,
                });
        }
    }
}
